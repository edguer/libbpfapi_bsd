/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _BPF_SVC_H_RPCGEN
#define _BPF_SVC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum bpf_cmd {
	BPF_MAP_CREATE = 0,
	BPF_MAP_LOOKUP_ELEM = 1,
	BPF_MAP_UPDATE_ELEM = 2,
	BPF_MAP_DELETE_ELEM = 3,
	BPF_MAP_GET_NEXT_KEY = 4,
	BPF_PROG_LOAD = 5,
	BPF_OBJ_PIN = 6,
	BPF_OBJ_GET = 7,
	BPF_PROG_ATTACH = 8,
	BPF_PROG_DETACH = 9,
	BPF_PROG_TEST_RUN = 10,
	BPF_PROG_RUN = BPF_PROG_TEST_RUN,
	BPF_PROG_GET_NEXT_ID = BPF_PROG_TEST_RUN + 1,
	BPF_MAP_GET_NEXT_ID = BPF_PROG_TEST_RUN + 2,
	BPF_PROG_GET_FD_BY_ID = BPF_PROG_TEST_RUN + 3,
	BPF_MAP_GET_FD_BY_ID = BPF_PROG_TEST_RUN + 4,
	BPF_OBJ_GET_INFO_BY_FD = BPF_PROG_TEST_RUN + 5,
	BPF_PROG_QUERY = BPF_PROG_TEST_RUN + 6,
	BPF_RAW_TRACEPOINT_OPEN = BPF_PROG_TEST_RUN + 7,
	BPF_BTF_LOAD = BPF_PROG_TEST_RUN + 8,
	BPF_BTF_GET_FD_BY_ID = BPF_PROG_TEST_RUN + 9,
	BPF_TASK_FD_QUERY = BPF_PROG_TEST_RUN + 10,
	BPF_MAP_LOOKUP_AND_DELETE_ELEM = BPF_PROG_TEST_RUN + 11,
	BPF_MAP_FREEZE = BPF_PROG_TEST_RUN + 12,
	BPF_BTF_GET_NEXT_ID = BPF_PROG_TEST_RUN + 13,
	BPF_MAP_LOOKUP_BATCH = BPF_PROG_TEST_RUN + 14,
	BPF_MAP_LOOKUP_AND_DELETE_BATCH = BPF_PROG_TEST_RUN + 15,
	BPF_MAP_UPDATE_BATCH = BPF_PROG_TEST_RUN + 16,
	BPF_MAP_DELETE_BATCH = BPF_PROG_TEST_RUN + 17,
	BPF_LINK_CREATE = BPF_PROG_TEST_RUN + 18,
	BPF_LINK_UPDATE = BPF_PROG_TEST_RUN + 19,
	BPF_LINK_GET_FD_BY_ID = BPF_PROG_TEST_RUN + 20,
	BPF_LINK_GET_NEXT_ID = BPF_PROG_TEST_RUN + 21,
	BPF_ENABLE_STATS = BPF_PROG_TEST_RUN + 22,
	BPF_ITER_CREATE = BPF_PROG_TEST_RUN + 23,
	BPF_LINK_DETACH = BPF_PROG_TEST_RUN + 24,
	BPF_PROG_BIND_MAP = BPF_PROG_TEST_RUN + 25,
};
typedef enum bpf_cmd bpf_cmd;

enum bpf_map_type {
	BPF_MAP_TYPE_UNSPEC = 0,
	BPF_MAP_TYPE_HASH = 1,
	BPF_MAP_TYPE_ARRAY = 2,
	BPF_MAP_TYPE_PROG_ARRAY = 3,
	BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
	BPF_MAP_TYPE_PERCPU_HASH = 5,
	BPF_MAP_TYPE_PERCPU_ARRAY = 6,
	BPF_MAP_TYPE_STACK_TRACE = 7,
	BPF_MAP_TYPE_CGROUP_ARRAY = 8,
	BPF_MAP_TYPE_LRU_HASH = 9,
	BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
	BPF_MAP_TYPE_LPM_TRIE = 11,
	BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
	BPF_MAP_TYPE_HASH_OF_MAPS = 13,
	BPF_MAP_TYPE_DEVMAP = 14,
	BPF_MAP_TYPE_SOCKMAP = 15,
	BPF_MAP_TYPE_CPUMAP = 16,
	BPF_MAP_TYPE_XSKMAP = 17,
	BPF_MAP_TYPE_SOCKHASH = 18,
	BPF_MAP_TYPE_CGROUP_STORAGE = 19,
	BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
	BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
	BPF_MAP_TYPE_QUEUE = 22,
	BPF_MAP_TYPE_STACK = 23,
	BPF_MAP_TYPE_SK_STORAGE = 24,
	BPF_MAP_TYPE_DEVMAP_HASH = 25,
	BPF_MAP_TYPE_STRUCT_OPS = 26,
	BPF_MAP_TYPE_RINGBUF = 27,
	BPF_MAP_TYPE_INODE_STORAGE = 28,
	BPF_MAP_TYPE_TASK_STORAGE = 29,
	BPF_MAP_TYPE_BLOOM_FILTER = 30,
};
typedef enum bpf_map_type bpf_map_type;

enum bpf_prog_type {
	BPF_PROG_TYPE_UNSPEC = 0,
	BPF_PROG_TYPE_SOCKET_FILTER = 1,
	BPF_PROG_TYPE_KPROBE = 2,
	BPF_PROG_TYPE_SCHED_CLS = 3,
	BPF_PROG_TYPE_SCHED_ACT = 4,
	BPF_PROG_TYPE_TRACEPOINT = 5,
	BPF_PROG_TYPE_XDP = 6,
	BPF_PROG_TYPE_PERF_EVENT = 7,
	BPF_PROG_TYPE_CGROUP_SKB = 8,
	BPF_PROG_TYPE_CGROUP_SOCK = 9,
	BPF_PROG_TYPE_LWT_IN = 10,
	BPF_PROG_TYPE_LWT_OUT = 11,
	BPF_PROG_TYPE_LWT_XMIT = 12,
	BPF_PROG_TYPE_SOCK_OPS = 13,
	BPF_PROG_TYPE_SK_SKB = 14,
	BPF_PROG_TYPE_CGROUP_DEVICE = 15,
	BPF_PROG_TYPE_SK_MSG = 16,
	BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
	BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
	BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
	BPF_PROG_TYPE_LIRC_MODE2 = 20,
	BPF_PROG_TYPE_SK_REUSEPORT = 21,
	BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
	BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
	BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
	BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
	BPF_PROG_TYPE_TRACING = 26,
	BPF_PROG_TYPE_STRUCT_OPS = 27,
	BPF_PROG_TYPE_EXT = 28,
	BPF_PROG_TYPE_LSM = 29,
	BPF_PROG_TYPE_SK_LOOKUP = 30,
	BPF_PROG_TYPE_SYSCALL = 31,
};
typedef enum bpf_prog_type bpf_prog_type;

enum bpf_attach_type {
	BPF_CGROUP_INET_INGRESS = 0,
	BPF_CGROUP_INET_EGRESS = 1,
	BPF_CGROUP_INET_SOCK_CREATE = 2,
	BPF_CGROUP_SOCK_OPS = 3,
	BPF_SK_SKB_STREAM_PARSER = 4,
	BPF_SK_SKB_STREAM_VERDICT = 5,
	BPF_CGROUP_DEVICE = 6,
	BPF_SK_MSG_VERDICT = 7,
	BPF_CGROUP_INET4_BIND = 8,
	BPF_CGROUP_INET6_BIND = 9,
	BPF_CGROUP_INET4_CONNECT = 10,
	BPF_CGROUP_INET6_CONNECT = 11,
	BPF_CGROUP_INET4_POST_BIND = 12,
	BPF_CGROUP_INET6_POST_BIND = 13,
	BPF_CGROUP_UDP4_SENDMSG = 14,
	BPF_CGROUP_UDP6_SENDMSG = 15,
	BPF_LIRC_MODE2 = 16,
	BPF_FLOW_DISSECTOR = 17,
	BPF_CGROUP_SYSCTL = 18,
	BPF_CGROUP_UDP4_RECVMSG = 19,
	BPF_CGROUP_UDP6_RECVMSG = 20,
	BPF_CGROUP_GETSOCKOPT = 21,
	BPF_CGROUP_SETSOCKOPT = 22,
	BPF_TRACE_RAW_TP = 23,
	BPF_TRACE_FENTRY = 24,
	BPF_TRACE_FEXIT = 25,
	BPF_MODIFY_RETURN = 26,
	BPF_LSM_MAC = 27,
	BPF_TRACE_ITER = 28,
	BPF_CGROUP_INET4_GETPEERNAME = 29,
	BPF_CGROUP_INET6_GETPEERNAME = 30,
	BPF_CGROUP_INET4_GETSOCKNAME = 31,
	BPF_CGROUP_INET6_GETSOCKNAME = 32,
	BPF_XDP_DEVMAP = 33,
	BPF_CGROUP_INET_SOCK_RELEASE = 34,
	BPF_XDP_CPUMAP = 35,
	BPF_SK_LOOKUP = 36,
	BPF_XDP = 37,
	BPF_SK_SKB_VERDICT = 38,
	BPF_SK_REUSEPORT_SELECT = 39,
	BPF_SK_REUSEPORT_SELECT_OR_MIGRATE = 40,
	BPF_PERF_EVENT = 41,
	BPF_TRACE_KPROBE_MULTI = 42,
	BPF_LSM_CGROUP = 43,
	__MAX_BPF_ATTACH_TYPE = 44,
};
typedef enum bpf_attach_type bpf_attach_type;

enum bpf_link_type {
	BPF_LINK_TYPE_UNSPEC = 0,
	BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
	BPF_LINK_TYPE_TRACING = 2,
	BPF_LINK_TYPE_CGROUP = 3,
	BPF_LINK_TYPE_ITER = 4,
	BPF_LINK_TYPE_NETNS = 5,
	BPF_LINK_TYPE_XDP = 6,
	BPF_LINK_TYPE_PERF_EVENT = 7,
	BPF_LINK_TYPE_KPROBE_MULTI = 8,
	BPF_LINK_TYPE_STRUCT_OPS = 9,
	MAX_BPF_LINK_TYPE = 9 + 1,
};
typedef enum bpf_link_type bpf_link_type;

enum bpf_map_update_elem {
	BPF_ANY = 0,
	BPF_NOEXIST = 1,
	BPF_EXIST = 2,
	BPF_F_LOCK = 4,
};
typedef enum bpf_map_update_elem bpf_map_update_elem;

enum _ebpf_execution_type {
	EBPF_EXECUTION_ANY = 0,
	EBPF_EXECUTION_JIT = 1,
	EBPF_EXECUTION_INTERPRET = 2,
	EBPF_EXECUTION_NATIVE = 3,
};
typedef enum _ebpf_execution_type _ebpf_execution_type;

typedef _ebpf_execution_type ebpf_execution_type_t;

struct _ebpf_instruction {
	u_int opcode;
	u_int dst_src;
	int offset;
	int imm;
};
typedef struct _ebpf_instruction _ebpf_instruction;

typedef _ebpf_instruction ebpf_instruction_t;

struct _original_fd_handle_map {
	u_int original_fd;
	u_int inner_map_original_fd;
	int file_handle;
};
typedef struct _original_fd_handle_map _original_fd_handle_map;

typedef _original_fd_handle_map original_fd_handle_map_t;

struct _ebpf_program_load_info {
	char *object_name;
	char *section_name;
	char *program_name;
	u_int program_type;
	ebpf_execution_type_t execution_type;
	int program_handle;
	u_int map_count;
	original_fd_handle_map_t *handle_map;
	u_int instruction_count;
	ebpf_instruction_t *instructions;
};
typedef struct _ebpf_program_load_info _ebpf_program_load_info;

typedef _ebpf_program_load_info ebpf_program_load_info;

struct ebpf_verify_arg {
	ebpf_program_load_info *info;
	u_int *log_size;
	char *logs;
};
typedef struct ebpf_verify_arg ebpf_verify_arg;

#define VERIFY_AND_LOAD 0x2ffffffa
#define VERIFY_AND_LOAD_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define EBPF_VERIFY_LOAD_PROGRAM 1
extern  int * ebpf_verify_load_program_1(ebpf_verify_arg *, CLIENT *);
extern  int * ebpf_verify_load_program_1_svc(ebpf_verify_arg *, struct svc_req *);
extern int verify_and_load_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define EBPF_VERIFY_LOAD_PROGRAM 1
extern  int * ebpf_verify_load_program_1();
extern  int * ebpf_verify_load_program_1_svc();
extern int verify_and_load_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_bpf_cmd (XDR *, bpf_cmd*);
extern  bool_t xdr_bpf_map_type (XDR *, bpf_map_type*);
extern  bool_t xdr_bpf_prog_type (XDR *, bpf_prog_type*);
extern  bool_t xdr_bpf_attach_type (XDR *, bpf_attach_type*);
extern  bool_t xdr_bpf_link_type (XDR *, bpf_link_type*);
extern  bool_t xdr_bpf_map_update_elem (XDR *, bpf_map_update_elem*);
extern  bool_t xdr__ebpf_execution_type (XDR *, _ebpf_execution_type*);
extern  bool_t xdr_ebpf_execution_type_t (XDR *, ebpf_execution_type_t*);
extern  bool_t xdr__ebpf_instruction (XDR *, _ebpf_instruction*);
extern  bool_t xdr_ebpf_instruction_t (XDR *, ebpf_instruction_t*);
extern  bool_t xdr__original_fd_handle_map (XDR *, _original_fd_handle_map*);
extern  bool_t xdr_original_fd_handle_map_t (XDR *, original_fd_handle_map_t*);
extern  bool_t xdr__ebpf_program_load_info (XDR *, _ebpf_program_load_info*);
extern  bool_t xdr_ebpf_program_load_info (XDR *, ebpf_program_load_info*);
extern  bool_t xdr_ebpf_verify_arg (XDR *, ebpf_verify_arg*);

#else /* K&R C */
extern bool_t xdr_bpf_cmd ();
extern bool_t xdr_bpf_map_type ();
extern bool_t xdr_bpf_prog_type ();
extern bool_t xdr_bpf_attach_type ();
extern bool_t xdr_bpf_link_type ();
extern bool_t xdr_bpf_map_update_elem ();
extern bool_t xdr__ebpf_execution_type ();
extern bool_t xdr_ebpf_execution_type_t ();
extern bool_t xdr__ebpf_instruction ();
extern bool_t xdr_ebpf_instruction_t ();
extern bool_t xdr__original_fd_handle_map ();
extern bool_t xdr_original_fd_handle_map_t ();
extern bool_t xdr__ebpf_program_load_info ();
extern bool_t xdr_ebpf_program_load_info ();
extern bool_t xdr_ebpf_verify_arg ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_BPF_SVC_H_RPCGEN */
